## Meter reads [/meter-reads/submit]
Meter reads endpoint allows you to submit meter reads for single/dual/joint invoice accounts. Responses from this endpoint will be returned in JSON format only.
Meter reads endpoint supports a controller alone now:
* POST /meter-reads/submit

#### Meter read
Meter read as a resource represents following information

| Property | Type | As request | As response | Description |
| :-------------------- | :---------- | :---------- | :---------- | ------------------------------------------------------------ |
| id | string | `Optional` | `Returned always` |  It is a concatenated value of meter read and date(time), separated by (-). |
| reading | string | `Mandatory` | `Returned always` |  Reading taken from the meter. |
| classification | string | `Optional` | `Returned always` |  Classification description, it mentions whether the reading is "Actual" or "Estimated", if available. |
| register | string | `Mandatory` | `Returned always` |  Register identifier, concatenated value of account number, contract number, meter serial number and register number separated by '-'. |
| date | string | `Optional` | `Returned always` |  Date on which the reading is taken, in dd/MM/yyyy format. |
| status | string | `Optional` | `Returned always` |  It will return any one of the following status `failed`, `stored`, `stored for next bill`, `implausible read`, `cancel rebill`, `sap down` or `unknown`. |

Submit meter read request mentions whether outOfTolerance can be overridden and sends all the meter reads to be submitted.
If `outOfToleranceOverride` is not send in the request, it will be defaulted to `false`, so that implausible reading is not allowed to submit.

#### Meter Readings
Readings associated to all the accounts available for the customer, can be send in request body
Meter readings request should contain atleast one meter read. Each of the meter read will be validated.

### Submit Meter reads [POST /meter-reads/submit]
+ Request 'SUCCESS' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

  + Body

            {
                "meterReads": [
                    {
                        "reading": "01170",
                        "date": "16/08/2015",
                        "register": "851001347816-1501675080-QTEwWDg4MjE4OA-001"
                    }
                ],
                "meta": {
                    "outOfToleranceOverride": true
                }
            }

+ Response 200 (application/json)

            {
                "status": "SUCCESS",
                "data": {
                    "meterReads": [
                        {
                            "id": "01170-20150816",
                            "reading": "01170",
                            "classification": "Actual",
                            "register": "851001347816-1501675080-QTEwWDg4MjE4OA-001",
                            "date": "16/08/2015",
                            "status": "stored"
                        }
                    ]
                },
                "errors": [],
                "meta": {
                    "storeAndForward": false
                }
            }

+ Request 'Invalid access token used for submitting meter reads' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 401 (application/json)

          {
              "status": "FAIL",
              "data": {},
              "errors": [
                  {
                      "code": "authorize",
                      "message": "access_denied"
                  }
              ],
              "meta": {}
          }

+ Request 'Invalid request' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 400 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "meterReads",
                      "message": "error.client.meterReads.null"
                  }
              ],
              "meta": {}
          }

+ Request 'Invalid meter reads' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 400 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "reading",
                      "message": "error.client.reading.invalid"
                  }
              ],
              "meta": {}
          }

+ Request 'Invalid account number' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 400 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "accountNumber",
                      "message": "error.client.accountNumber.invalid"
                  }
              ],
              "meta": {}
          }

+ Request 'Account number not associated to logged in customer' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 403 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                    "code": "account",
                    "message": "error.client.account.invalid"
                  }
              ],
              "meta": {}
          }

+ Request 'No matching meters found' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 404 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "meter",
                      "message": "error.meter.notFound"
                  }
              ],
              "meta": {}
          }

+ Request 'No matching registers found' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 404 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "register",
                      "message": "error.register.notFound"
                  }
              ],
              "meta": {}
          }

+ Request 'Out of tolerance reading' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 400 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "meterReads",
                      "message": "error.meterRead.outOfTolerance"
                  }
              ],
              "meta": {}
          }

+ Request 'More than 3 meter reads submitted on a day' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 400 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "meter",
                      "message": "error.client.mererReadCount.exceeded"
                  }
              ],
              "meta": {}
          }

+ Request 'Incomplete reading' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 400 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "meterReads",
                      "message": "error.client.meterReads.incomplete"
                  }
              ],
              "meta": {}
          }

+ Request 'Error from back end systems' (application/json)

  + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526
            Authorization: Bearer {accesstoken}

+ Response 500 (application/json)

          {
              "status": "ERROR",
              "data": {},
              "errors": [
                  {
                      "code": "system",
                      "message": "error.system.unexpected.error"
                  }
              ],
              "meta": {}
          }
