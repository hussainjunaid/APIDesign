## Temporary profiles [/userinfo/temporary-profiles]

Temporary profile represents a disposable user profile at online which requires verification from user. The use case for temporary profile is as depicted below.

```
     +-----------+                                         +--------------+                                                       +---------------+
     |          -+--(1)-- User selects email me ---------->|             -+--(2)-- POST /userinfo/temporary-profiles ------------>|               |
     |           |                                         |              |                                                       |               |
     | Customer -+--(4)-- User clicks the link on email -->| Web browser -+--(5)-- GET /userinfo/temporary-profiles/token-info -->| Online server |
     |           |                                         |              |                                                       |               |
     |          -+--(6)-- User enters password & submits ->|             -+--(7)-- PUT /userinfo/temporary-profiles ------------->|               |
     +-----------+                                         +--------------+                                                       +---------------+
           ^                                                                                                                              v
           |                                                                                                                              |
           '---------------------------------------------------------------(3)----- Email triggered to user with token -------------------'
```

Flow is explained below.

 1. User selects email me option and clicks on submit in registration. Refer to screenshot attached from prototype.
 2. App loaded in web browser uses a POST on /userinfo/temporary-profile with all the parameters needed to validate the customer.
 3. Online server finds the information is valid and triggers an email with a token in the link to a new web app.
 4. User clicks on the link in email. This will take the user to a new application on the web browser. In this situation, we might want to show some information about the user (Probably his email address)
 5. In order to fetch some use information, the App in web browser will use a GET on /userinfo/temporary-profile/token-info to retrieve more information mapped to given token.
 6. Now the user is provided an opportunity to enter his password.
 7. When the user clicks on submit, app will use a PUT on /userinfo/temporary-profile to create an actual account at online. Till this point, the user is not considered registered.

`temporaryProfile` as such just represents a disposable user profile at online. However, its `id` is mapped to a token that expires post 1 hour. If `temporaryProfile` is not upgraded within this time slot, it will be disposed.
To retrieve information about such a token and few information it is mapped to, `/userinfo/temporary-profiles/token-info` helps.

#### Temporary profile
As a resource, following properties define a Temporary profile.

| Property | Type | As request | As response |Description |
| :-------------------- | :---------- | :----------  | :---------- | ------------------------------------------------------------ |
| id | string | `Optional` | `Returned always` | A unique id for temporary profile created.|
| title | string | `Mandatory` | `Returned always` | Title of customer. |
| firstName | string | `Mandatory` | `Returned always` | First name of customer. |
| surname | string | `Mandatory` | `Returned always` | Surname of customer. |
| email | string | `Mandatory` | `Returned always` | Email address of customer. |

>`Note`: When a temporary profile is updated with a validated token, it is upgraded to a full customer profile.

In order to create a temporary profile, you would need a valid match token. Kindly refer to Customer's api in order to understand how to get one.

When a temporary profile is created, `matchToken` is validated against inputs provided as `temporaryProfile` and if every input is matching the data used to fetch a `matchToken` a `temporaryProfile` will be created.

Also note that `id` of `temporaryProfile` will be sent along with an email as shown in the flow above. The format of the URL embedded within the email is provided below.

```
/url?temporaryProfile=:id
```

>`Note`: URL has not been decieded yet. This is configurable via CMS.


### Create temporary profile [POST]
+ Request 'SUCCESS' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

    + Body

            {
                "temporaryProfile": {
                    "title": "Mr",
                    "firstName": "M",
                    "surname": "Street",
                    "email": "emailAddress@bgdigitaltest.co.uk"
                },
                "meta": {
                    "matchToken": "750319c2-dee6-5113-95f9-a1b501124a64"
                }
            }

+ Response 200 (application/json)

            {
                  "status": "SUCCESS",
                  "data": {
                    "temporaryProfile": {
                      "id": "5aa6a106-c6d5-52c4-af9d-a3d0b361dffa",
                      "firstName": "M",
                      "surname": "Street",
                      "title": "Mr",
                      "email": "pradeepkrishna.govindaraju@centrica.com"
                    }
                  },
                  "errors": [],
                  "meta": {}
            }

+ Request 'Match token is invalid' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 400 (application/json)

            {
                  "status": "FAIL",
                  "data": {},
                  "errors": [
                    {
                      "code": "matchToken",
                      "message": "error.client.matchToken.invalid"
                    }
                  ],
                  "meta": {}
            }

+ Request 'If any of attributes of temporaryProfile is invalid' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 400 (application/json)

            {
                  "status": "FAIL",
                  "data": {},
                  "errors": [
                    {
                      "code": "firstName",
                      "message": "error.client.firstName.blank"
                    }
                  ],
                  "meta": {}
            }

### Update temporary profile [PUT]

+ Request 'SUCCESS' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

    + Body

            {
                "temporaryProfile": {
                  "id": "5aa6a106-c6d5-52c4-af9d-a3d0b361dffa",
                  "firstName": "M",
                  "surname": "Street",
                  "title": "Mr",
                  "email": "pradeepkrishna.govindaraju@centrica.com"
                },
                "meta": {
                    "password": "password12"
                }
            }

+ Response 200 (application/json)

            {
                      "status": "SUCCESS",
                      "data": {},
                      "errors": [],
                      "meta": {}
            }

+ Request 'Temporary Profile is not found' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 404 (application/json)

            {
                  "status": "FAIL",
                  "data": {},
                  "errors": [
                    {
                      "code": "temporaryProfile",
                      "message": "error.client.temporaryProfile.invalid"
                    }
                  ],
                  "meta": {}
            }

+ Request 'User already exists' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 400 (application/json)

            {
                  "status": "FAIL",
                  "data": {},
                  "errors": [
                    {
                      "code": "userinfo",
                      "message": "error.server.userinfo.exists"
                    }
                  ],
                  "meta": {}
            }

+ Request 'If any of attributes of temporaryProfile is invalid' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 400 (application/json)

            {
                  "status": "FAIL",
                  "data": {},
                  "errors": [
                    {
                      "code": "firstName",
                      "message": "error.client.firstName.blank"
                    }
                  ],
                  "meta": {}
            }

+ Request 'If password supplied in Meta input is invalid' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 400 (application/json)

            {
                  "status": "FAIL",
                  "data": {},
                  "errors": [
                    {
                      "code": "password",
                      "message": "error.client.password.invalid"
                    }
                  ],
                  "meta": {}
            }

## Temporary Profile tokeninfo [/userinfo/temporary-profiles/token-info{?token}]

+ Parameters

    + token: 5aa6a106-c6d5-52c4-af9d-a3d0b361dffa (mandatory, string)

### Retrieve tokeninfo for password reset [GET]
+ Request 'SUCCESS' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 200 (application/json)

            {
                  "title": "Mr",
                  "email": "pradeepkrishna.govindaraju@centrica.com",
                  "expiresIn": 1177,
                  "surname": "Street",
                  "firstName": "M"
            }

+ Request 'Token temporaryProfile id is invalid' (application/json)

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 400 (application/json)

            {
                "status": "FAIL",
                "data": {},
                "errors": [
                    {
                        "code": "token",
                        "message": "error.client.token.invalid"
                    }
                ],
                "meta": {}
            }
