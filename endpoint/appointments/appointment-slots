## Appointment slots collection [/appointment-slots]
Appointment Slots endpoint allows you to retrieve appointment slots for following operations,

1. Book an appointment to install smart meter for service order.
2. Book an appointment for `Annual service visit (ASV)`, `First visit (FV)`, `Interim Breakdown (IB)` or reschedule the same.

#### Appointment Slot
Appointment Slot as a resource will be represented as below:

| Name | Type | As request | As response | Description |
| :------------| :---------- | :------------| :---------- | ------------------------------------------------------------ |
| id | string | `Not Applicable` | `Returned always` | Unique Id to represent the appointment slot with pattern of variant, start time and end time or Encrypted unique id that is returned from backend for each slot. |
| variant | String | `Not Applicable` | `Returned always` | It will represent the time variant of slots. |
| startTime | String | `Not Applicable` | `Returned always` | Start time of the appointment slot.  |
| endTime | String | `Not Applicable` | `Returned always` | End time of the appointment slot. |
| available | boolean | `Not Applicable` | `Returned always` | Status of the appointment slot. |

##### variant
Variant is used to highlight the slot type of the appointment slots. If slot type is not returned from back end it will tell us the the time diference between the `startTime` and `endTime`.

###### Job type as `smart` and `chi` 
The time difference between `startTime` and `endTime`. For example, start time is `08:00` and end time is `12:00`, the variant would be `4`.

###### Job type as `services`

###### For preference slots:

| Variant | Duration | 
| :------------ | :----------------------- |
|  AM |  08:00 to 13:00 |
|  FF |  10:00 to 14:00 |
|  PM | 12:00 to 18:00 |
|  ALLDAY | 08:00 to 18:00 |
|  EVENING | 18:00 to 20:00 |

###### For two hour slots:

| Variant | Duration |
| :------------ | :----------------------- |
|  1  |  08:00 to 10:00 |
|  2  |  10:00 to 12:00 |
|  3  |  12:00 to 14:00 |
|  4  |  14:00 to 16:00 |
|  5  |  16:00 to 18:00 |
|  6  |  18:00 to 20:00 |

> `Note`: Authorization is not required when slots are requested for the job type `smart` and `chi`

> `Note`: For `chi` job type the `priority` of receiving the appointment slots is based on the current working state of the boiler. If the current working state of boiler is chosen as `Yes` by the customer, then the priority value will be sent as `false` and vice versa. 

> `Note`: The above appointment slots are returned for a new appointment. If the new appointment is combinable with an existing appointment, the existing appointment will be returned as part of meta. In this case, where an existing appointment is available, the flow of combining appointment with an existing is explained in [appointment use case](/api-reference/appointments.md#use-case-for-combine-breakdown-appointment-with-existing-appointment). 

### Retrieve Smart appointment-slots [GET /appointment-slots{?jobType,dateStartFrom,range,showUnavailableSlot,serviceOrder}]
+ Parameters

    + jobType (string,required) - Type of job for which slots are requested. Job types are `smart`, `asv`, `fv`, `ib`, `asv-and-ib` and `fv-and-ib`
    + dateStartFrom (integer,Optional) - Number of days added to the current to set the start date of appointment
    + range (integer,Optional) - Number of days added to the start date  to set the end date of appointment
    + showUnavailableSlot (boolean,Optional) - default value is `true`. Used to filter unavailable slots from the appointment slots response
    + serviceOrder (string,optional) - Required for the type `smart`. 64-bit encrypted service order number

+ Request When jobType value sent as `smart`, `asv`, `fv`, `ib`, `asv-and-ib` and `fv-and-ib`

    + Headers
    
            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 200 (application/json)

            {
                "status": "SUCCESS",
                "data": {
                    "appointmentSlots": [
                        {
                            "id": "2-2015-10-11T08:00:00+0100-2015-10-11T10:00:00+0100",
                            "variant": "2",
                            "startTime": "2015-10-11T08:00:00+0100",
                            "endTime": "2015-10-11T10:00:00+0100",
                            "available": true
                        },
                        {
                            "id": "2-2015-09-11T14:00:00+0100-2015-09-11T16:00:00+0100",
                            "variant": "2",
                            "startTime": "2015-09-11T14:00:00+0100",
                            "endTime": "2015-09-11T16:00:00+0100",
                            "available": true
                        },
                        {
                            "id": "4-2015-10-11T08:00:00+0100-2015-10-11T13:00:00+0100",
                            "variant": "4",
                            "startTime": "2015-10-11T08:00:00+0100",
                            "endTime": "2015-10-11T12:00:00+0100",
                            "available": true
                        },
                        {
                            "id": "2-2015-11-12T14:00:00+0000-2015-10-11T16:00:00+0000",
                            "variant": "2",
                            "startTime": "2015-11-12T14:00:00+0000",
                            "endTime": "2015-11-12T16:00:00+0000",
                            "available": false
                        }
                    ]
                },
                "errors": [],
                "meta": {
                    "appointmentPayload": "srx7t/fT2CajwcGXZ30kz/M3RyEs5RuelZ+qxavAbNokWG94AK8M2vmxjn7WAOhhE3CTTPMj/f7a8LF/DFv+Xw=="
                }
            }
            
### Retrieve Services appointment-slots [GET /appointment-slots{?jobType,showUnavailableSlot,servicesAccount,appointment,priority,fault*}]

+ Parameters

    + jobType (string,required) - Type of job for which slots are requested. Job types are `smart`, `asv`, `fv`, `ib`, `asv-and-ib`, `fv-and-ib` and `chi`
    + servicesAccount (string,Optional) - `Required` for the types `asv`, `fv`, `ib`, `asv-and-ib` and `fv-and-ib`. Service account of the customer which has the appointment to be rescheduled. 
    + appointment (string,Optional) - `Required` while rescheduling an existing appointment. Id of the appointment to be rescheduled.
    + priority (boolean, Optional) - default value is `false`. Priority of the appointment to be rescheduled or to retrieve the CHI slots.
    + fault  (String, Optional) - `Required` for type `ib`, `asv-and-ib` and `fv-and-ib`. Multiple faults can be passed as a query parameter to get the appointment slots to book an engineer
    + showUnavailableSlot (boolean, Optional) - default value is `false`. Used to filter unavailable slots from the appointment slots response. Currently not supported for type `chi`

+ Request When jobType value sent as `smart`, `asv`, `fv`, `ib`, `asv-and-ib` and `fv-and-ib`

    + Headers

            Authorization: Bearer {accessToken}
            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 200 (application/json)

            {
                "status": "SUCCESS",
                "data": {
                    "appointmentSlots": [
                        {
                            "id": "1-2015-10-11T08:00:00+0100-2015-10-11T10:00:00+0100",
                            "variant": "1",
                            "startTime": "2015-10-11T08:00:00+0100",
                            "endTime": "2015-10-11T10:00:00+0100",
                            "available": true
                        },
                        {
                            "id": "4-2015-09-11T14:00:00+0100-2015-09-11T16:00:00+0100",
                            "variant": "4",
                            "startTime": "2015-09-11T14:00:00+0100",
                            "endTime": "2015-09-11T16:00:00+0100",
                            "available": true
                        },
                        {
                            "id": "AM-2015-10-11T08:00:00+0100-2015-10-11T13:00:00+0100",
                            "variant": "AM",
                            "startTime": "2015-10-11T08:00:00+0100",
                            "endTime": "2015-10-11T13:00:00+0100",
                            "available": true
                        },
                        {
                            "id": "FF-2015-11-12T14:00:00+0000-2015-10-11T16:00:00+0000",
                            "variant": "FF",
                            "startTime": "2015-11-12T10:00:00+0000",
                            "endTime": "2015-11-12T14:00:00+0000",
                            "available": false
                        }
                    ]
                },
                "errors": [],
                "meta": {
                    "appointmentPayload": "srx7t/fT2CajwcGXZ30kz/M3RyEs5RuelZ+qxavAbNokWG94AK8M2vmxjn7WAOhhE3CTTPMj/f7a8LF/DFv+Xw=="
                }
            }

### Retrieve CHI appointment-slots [GET /appointment-slots{?jobType,dateStartFrom,range,postcode,priority}]
+ Parameters

    + jobType (String, required) - Type of job for which slots are requested. Job types are `smart`, `asv`, `fv`, `ib`, `asv-and-ib`, `fv-and-ib` and `chi`.
    + dateStartFrom (integer, Optional) - Number of days added to the current to set the start date of appointment.
    + range (integer, Optional) - Number of days added to the start date  to set the end date of appointment.
    + priority (boolean, Optional) - default value is `false`. Priority of the appointment to be rescheduled or to retrieve the CHI slots.
    + postcode (string, required) - for the type `chi`. Postcode which customer entered.

+ Request

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 200 (application/json)

            {
                "status": "SUCCESS",
                "data": {
                    "appointmentSlots": [
                        {
                            "id": "Ri2ZzvrA+GvSfGcjVUBVfqibwrQ8MqjYQc2p33eKxxk=",
                            "variant": "6",
                            "startTime": "2016-02-01T08:00:00+0100",
                            "endTime": "2016-02-01T14:00:00+0100",
                            "available": true
                        },
                        {
                            "id": "M1y6K+lyIXmBBVQSv3/qO6eUl4qV2UvQEij4IaMiYHs=",
                            "variant": "2",
                            "startTime": "2016-02-01T14:00:00+0100",
                            "endTime": "2016-02-01T16:30:00+0100",
                            "available": true
                        },
                        {
                            "id": "/heqXE5i5IgHxFHtZIii0RAk1Jjknj61qjbsrnkTKLE=",
                            "variant": "2",
                            "startTime": "2016-02-01T16:30:00+0100",
                            "endTime": "2016-02-01T18:30:00+0100",
                            "available": true
                        },
                        {
                            "id": "Dl3a5kmjXpCuob4VSVsUuRu1eae6N75m8/FN607JJbE=",
                            "variant": "1",
                            "startTime": "2016-02-01T18:30:00+0100",
                            "endTime": "2016-02-01T20:00:00+0100",
                            "available": true
                        }
                    ]
                },
                "errors": [],
                "meta": {
                    "appointmentPayload": "TTZ3ZUxXNmRUY0FEYXYxVWJVZlUvVWlqUEFEeUJ6a0pPbW1tZ0NhKzNEeFJWQmw0Uy92cVo3dUx6SGVaVDF1cjFFVlFVN1Fhd2IzRAo3MGVGdStXVHFrTCt0aW80MkFyU2J1eFcvUnlPd3Rqc2U3R2pRVHM3bTh0RGx3Mm5wL0trcVhGL3VQK3F5ZXlXVEtTdC82eE1Qdz09"
                }
            } 

+ Request - No appointment slots found

    + Headers

            cid: 05e230bf-a9cf-4b31-bc54-d3a995f62526

+ Response 200 (application/json)

            {
                "status": "SUCCESS",
                "data": {
                    "appointmentSlots": []
                },
                "errors": [],
                "meta": {}
            }
            
+ Response 400 (application/json)

            {
                "status": "FAIL",
                "data": {},
                "errors": [
                    {
                        "code": "serviceorder",
                        "message": "error.client.serviceorder.blank"
                    }
                ],
                "meta": {}
            }

+ Response 403 (application/json)
            
            {
                "status": "FAIL",
                "data": {},
                "errors": [
                    {
                        "code": "account",
                        "message": "error.client.account.invalid"
                    }
                ],
                "meta": {}
            }

+ Response 400 (application/json)

            {
                "status": "FAIL",
                "data": {},
                "errors": [
                    {
                        "code": "postcode",
                        "message": "error.client.postcode.notAvailable"
                    }
                ],
                "meta": {}
            }
            
+ Response 500 (application/json)

            {
                "status": "ERROR",
                "data": {}
                "errors": [
                    {
                        "code": "server.error.internal",
                        "message": "An internal error while processing request."
                    }
                ],
                "meta": {}
            }
